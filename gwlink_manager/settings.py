"""
Django settings for gwlink_manager project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import logging
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Project definition
PROJECT_NAME='gwlink_manager'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-q!)lf=_t6ho^_^sfuringhi@=ey5@a&v3rdco$0&fs19#j=or='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    # cedge apps
    'cache',
    'api',
    'account',
    'cluster',
    'gwlink_migration',
]

# Rest Framework Settings
REST_FRAMEWORK = {
  'DEFAULT_AUTHENTICATION_CLASSES': (
    'account.authentication.BearerAuthentication',
  ),
  'DEFAULT_PERMISSION_CLASSES': (
    'rest_framework.permissions.IsAuthenticated',
    'rest_framework.permissions.AllowAny',
  )
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gwlink_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTH_USER_MODEL = 'account.User'

WSGI_APPLICATION = 'gwlink_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates/static/')]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600

LOG_DIR=os.path.join(BASE_DIR, 'logs')
LOG_FILE = '/gwlink_manager.log'
LOG_PATH = LOG_DIR + LOG_FILE

if not os.path.exists(LOG_DIR):
  os.mkdir(LOG_DIR)

if not os.path.exists(LOG_PATH):
  open(LOG_PATH, 'a').close()  # create empty log file
else:
  open(LOG_PATH, 'w').close()  # clear a log file

# DEBUG LEVEL: DEBUG < INFO < WARNING < ERROR < CRITICAL
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s:%(lineno)s: %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'standard',
            'filename': LOG_PATH,
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'WARNING',  # change debug level as appropriate
            'propagate': False,
        },
        PROJECT_NAME: {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },

        'account': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'api': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'cache': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'cluster': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'frontend': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'mqtt': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'repository': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'service': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'utils': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        }
    },
}

def get_logger(app_name):
    """
    get logger with app_name (i.e., api,cluster, benchmark)
    :param app_name:
    :return:
    """

    return logging.getLogger(app_name)


# cluster app config(0: infinity, integer: timeout waiting seconds)
KUBE_API_REQUEST_TIMEOUT = 1

# temporary file upload path
TEMP_DIRECTORY = os.path.join(BASE_DIR, 'static/temp')

# bash template directory
BASH_TEMPLATE_DIRECTORY = os.path.join(BASE_DIR, 'templates/bash')

# command executor thread pool
NUMBER_OF_COMMAND_EXECUTORS = 10

# MQTT CONNECTION
MQTT_IP = '0.0.0.0'
MQTT_PORT = 30001
MQTT_ID = 'admin'
MQTT_PWD = '1234'
MQTT_VHOST = '/'

# MQTT REQUEST SETUP
MAX_REQUEST_WAIT_TIMEOUT = 60*60        # 60min
REQUEST_WAIT_CHECK_TICK = 1             # 1sec
REQUEST_EXPIRED_SECONDS = 60*60         # 60min
EXPIRED_REQUESTS_CHECK_PERIOD = 30*60   # 30min


# REDIS CONNECTION
REDIS_PORT = 6379

# CLUSTER SESSION CHECK TICK
CLUSTER_SESSION_CHECK_TICK = 1          # sec
CLUSTER_SESSION_EXPIRED_SECONDS = 10    # sec

# MULTI-CLUSTER MIGRATION
MAX_MIGRATION_SUBTASK_RETRY = 30                # 30 times
MIGRATION_REQUEST_EXPIRATION_TIME = (60*60)     # 1h

# CLUSTER AGENT DEPLOY COMMAND
CLUSTER_AGENT_DEPLOY_COMMAND = 'curl -Ls {my_host}:{my_port}/api/app/v1/clusters/{cluster}/gw-agent | bash'

# MEMORY MANAGER
DISPLAY_PROCESS_MEMORY = False
MEMORY_CIRCUIT_BREAK_ENABLED = True
MEMORY_CIRCUIT_BREAK_THRESHOLD = 80             # unit %
